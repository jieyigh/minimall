package com.jbh360.trade.controller;

import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jbh360.common.base.ErrorResult;
import com.jbh360.common.base.ErrorResultResponseTag;
import com.jbh360.common.exception.SystemErrorCode;
import com.jbh360.common.utils.ValidateUtil;
import com.jbh360.trade.service.OrderPayServiceImpl;
import com.jbh360.trade.vo.param.OrderPayParams;
import com.jbh360.trade.vo.rs.OrderPayResult;
import com.jbh360.trade.vo.rs.OrderResponseTag;
import com.jbh360.trade.vo.rs.PayResult;

@Controller
public class OrderPayController extends BaseController {

	@Autowired
	protected OrderPayServiceImpl orderPayServiceImpl;
	
	
	/**
	 * 支付
	 * @param params
	 * @param bindingResult
	 * @return
	 */
	@RequestMapping(value = "order/pay", method = { RequestMethod.POST,RequestMethod.GET })
	public @ResponseBody Object pay(@Valid OrderPayParams params,BindingResult bindingResult) {
		ErrorResult error= new ErrorResult();
		ErrorResultResponseTag errorResopneTag= new ErrorResultResponseTag();
		try {
			// 验证表单
			if(bindingResult.hasErrors()) {
				error.setErrorCode(SystemErrorCode.CommonErrorCode.INPUT_VALIDATION_ERROR);
				error.setErrorMessage(ValidateUtil.errorMessage(bindingResult));
				errorResopneTag.setErrorResult(error);
				return errorResopneTag;
			}	
			//查询
			PayResult payResult = orderPayServiceImpl.pay(params, error);
			if(error!=null&&!StringUtils.isBlank(error.getErrorCode())){
				errorResopneTag.setErrorResult(error);
				return errorResopneTag;
			}
			OrderResponseTag responseTag = new OrderResponseTag();
			responseTag.setPayResult(payResult);
			return responseTag;
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
			error.setErrorCode(SystemErrorCode.CommonErrorCode.SYSEM_ERROR);
			error.setErrorMessage(e.getMessage());
			errorResopneTag.setErrorResult(error);
			return errorResopneTag;
		}
	}
	
	@RequestMapping(value = "order/pay/async/notice", method = { RequestMethod.POST,RequestMethod.GET })
	public @ResponseBody Object asyncNotice(@Valid OrderPayParams params,BindingResult bindingResult) {
		return null;
	}
	
	@RequestMapping(value = "order/pay/sync/notice", method = { RequestMethod.POST,RequestMethod.GET })
	public @ResponseBody Object syncNotice(@Valid OrderPayParams params,BindingResult bindingResult) {
		return null;
	}

	/**
	 * 获取支付单信息接口
	 * @param params
	 * @param bindingResult
	 * @return
	 */
	@RequestMapping(value = "order/pay/order/get", method = { RequestMethod.POST,
			RequestMethod.GET })
	public @ResponseBody
	Object getPayOrder(
			@Valid OrderPayParams params,
			BindingResult bindingResult) {
		
		ErrorResult error = new ErrorResult();
		ErrorResultResponseTag errorResopneTag = new ErrorResultResponseTag();
		try {
			if (bindingResult.hasErrors()) {
				error.setErrorCode(SystemErrorCode.CommonErrorCode.INPUT_VALIDATION_ERROR);
				error.setErrorMessage(ValidateUtil.errorMessage(bindingResult));
				errorResopneTag.setErrorResult(error);
				return errorResopneTag;
			}

			OrderPayResult orderPayResult = orderPayServiceImpl.getPayOrder(params, error);
			if (error != null && !StringUtils.isBlank(error.getErrorCode())) {
				errorResopneTag.setErrorResult(error);
				return errorResopneTag;
			}
			return orderPayResult;

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			error.setErrorCode(SystemErrorCode.CommonErrorCode.SYSEM_ERROR);
			error.setErrorMessage(e.getMessage());
			errorResopneTag.setErrorResult(error);
			return errorResopneTag;
		}
	}
}
